#!/usr/bin/env python3

"""helper script to ensure intended files were downloaded.

uses manifest subset generated by get_files_from_manifest.py
"""

import argparse
import concurrent.futures
import sys
from pathlib import Path


def check_exists(entry: str, t_idx: int, n_idx: int) -> str | bool:
    """Check manifest entry to see if file exists.

    Args:
        entry: Line from manifest file
        t_idx: file_type position in entry as list
        n_idx: file_name position in entry as list

    Returns:
        fpath: If file not found, return file path, else return boolean False

    """
    info: list[str] = entry.rstrip("\n").split("\t")
    fpath: str = f"{info[t_idx]}/{info[n_idx]}"
    if not Path(fpath).is_file():
        return fpath
    return False


def run_py(args: argparse.Namespace) -> int:
    with open("missing_files.txt", "w") as missed, open(args.manifest_subset) as m:
        head: str = next(m)
        header: list[str] = head.rstrip("\n").split("\t")
        t_idx: int = header.index("file_type")
        n_idx: int = header.index("file_name")
        missed_ct: int = 0
        with concurrent.futures.ThreadPoolExecutor(16) as executor:
            results = {
                executor.submit(check_exists, file_info, t_idx, n_idx): file_info
                for file_info in m
            }
            for result in concurrent.futures.as_completed(results):
                if result.result():
                    print(result.result(), file=missed)
                    missed_ct += 1

    if missed_ct:
        print(f"Missed {missed_ct} files", file=sys.stderr)
        sys.exit(1)
    else:
        print("Got em all! Good job Ash!", file=sys.stderr)
        return 0


def main():
    parser = argparse.ArgumentParser(description="Check that files were downloaded")
    parser.add_argument(
        "-ms",
        "--manifest-subset",
        action="store",
        help="tsv list of desired genomic files",
    )

    args = parser.parse_args()
    run_py(args)


if __name__ == "__main__":
    main()
